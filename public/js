/**
 * Volleyball AI Client
 * 
 * This module provides client-side integration with the Google AI-powered
 * volleyball analysis system.
 */

class VolleyballAIClient {
  /**
   * Initialize the volleyball AI client
   * 
   * @param {string} baseUrl - The base URL of the API (default: http://localhost:3000)
   */
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.endpoints = {
      analyzeImage: '/api/volleyball/analyze-image',
      analyzeVideo: '/api/volleyball/analyze-video',
      analyzeFrame: '/api/volleyball/analyze-frame'
    };
  }

  /**
   * Make an API request
   * 
   * @param {string} endpoint - The API endpoint
   * @param {string} method - The HTTP method (GET, POST, etc.)
   * @param {object} data - The request data (for POST requests)
   * @param {boolean} isFormData - Whether the data is FormData
   * @returns {Promise} - The API response
   */
  async _request(endpoint, method = 'GET', data = null, isFormData = false) {
    const url = `${this.baseUrl}${endpoint}`;
    
    const options = {
      method,
      headers: {}
    };
    
    if (data && method !== 'GET') {
      if (isFormData) {
        options.body = data;
        // Don't set Content-Type for FormData, browser will set it with boundary
      } else {
        options.headers['Content-Type'] = 'application/json';
        options.body = JSON.stringify(data);
      }
    }
    
    try {
      const response = await fetch(url, options);
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || `HTTP error ${response.status}`;
        } catch (e) {
          errorMessage = errorText || `HTTP error ${response.status}`;
        }
        throw new Error(errorMessage);
      }
      
      return await response.json();
    } catch (error) {
      console.error(`API request error (${endpoint}):`, error);
      throw error;
    }
  }

  /**
   * Analyze a volleyball image
   * 
   * @param {File} imageFile - The image file to analyze
   * @param {string} analysisType - Type of analysis to perform ("technique", "positioning", or "tactics")
   * @returns {Promise} - Analysis results
   */
  async analyzeImage(imageFile, analysisType = 'technique') {
    const formData = new FormData();
    formData.append('image', imageFile);
    formData.append('analysis_type', analysisType);
    
    return this._request(this.endpoints.analyzeImage, 'POST', formData, true);
  }

  /**
   * Analyze a volleyball video for technique, positioning, or tactics.
   * @param {File} videoFile - The video file to analyze
   * @param {string} analysisType - Type of analysis: 'technique', 'positioning', or 'tactics'
   * @param {number} intervalSeconds - Interval between frames to analyze (in seconds)
   * @param {number} maxFrames - Maximum number of frames to analyze
   * @returns {Promise<Object>} Analysis results with timestamps and insights
   */
  async analyzeVideo(videoFile, analysisType, intervalSeconds = 2.0, maxFrames = 5) {
    const formData = new FormData();
    formData.append('video', videoFile);
    formData.append('analysis_type', analysisType);
    formData.append('interval_seconds', intervalSeconds.toString());
    formData.append('max_frames', maxFrames.toString());

    return this._request('/api/volleyball/analyze-video', {
      method: 'POST',
      body: formData,
      headers: {
        // Don't set Content-Type here - it will be set automatically for FormData
      },
    });
  }

  /**
   * Analyze a single video frame
   * 
   * @param {File|Blob} frameFile - The frame image file/blob to analyze
   * @param {string} analysisType - Type of analysis to perform ("technique", "positioning", or "tactics")
   * @returns {Promise} - Analysis results
   */
  async analyzeFrame(frameFile, analysisType = 'technique') {
    const formData = new FormData();
    formData.append('frame', frameFile);
    formData.append('analysis_type', analysisType);
    
    return this._request(this.endpoints.analyzeFrame, 'POST', formData, true);
  }

  /**
   * Convert a canvas to a Blob
   * 
   * @param {HTMLCanvasElement} canvas - The canvas element
   * @param {string} type - The image MIME type
   * @param {number} quality - The image quality (0-1)
   * @returns {Promise<Blob>} - Image blob
   */
  canvasToBlob(canvas, type = 'image/jpeg', quality = 0.9) {
    return new Promise((resolve) => {
      canvas.toBlob((blob) => resolve(blob), type, quality);
    });
  }

  /**
   * Capture a video frame and convert to a Blob
   * 
   * @param {HTMLVideoElement} videoElement - The video element
   * @returns {Promise<Blob>} - Frame blob
   */
  async captureVideoFrame(videoElement) {
    const canvas = document.createElement('canvas');
    canvas.width = videoElement.videoWidth;
    canvas.height = videoElement.videoHeight;
    
    const ctx = canvas.getContext('2d');
    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
    
    return await this.canvasToBlob(canvas);
  }

  /**
   * Set up real-time analysis for a video element
   * 
   * @param {HTMLVideoElement} videoElement - The video element
   * @param {HTMLElement} resultElement - Element to display analysis results
   * @param {string} analysisType - Type of analysis to perform
   * @param {number} interval - Interval between analyses (in milliseconds)
   * @returns {object} - Control functions (start, stop)
   */
  setupRealTimeAnalysis(videoElement, resultElement, analysisType = 'technique', interval = 5000) {
    let intervalId = null;
    let isRunning = false;
    
    const analyze = async () => {
      if (!isRunning || videoElement.paused || videoElement.ended) {
        return;
      }
      
      try {
        // Capture the current frame
        const frameBlob = await this.captureVideoFrame(videoElement);
        
        // Analyze the frame
        const result = await this.analyzeFrame(frameBlob, analysisType);
        
        // Display the result
        if (resultElement) {
          resultElement.textContent = result.analysis;
        }
      } catch (error) {
        console.error('Real-time analysis error:', error);
        if (resultElement) {
          resultElement.textContent = `Analysis error: ${error.message}`;
        }
      }
    };
    
    return {
      start: () => {
        if (!isRunning) {
          isRunning = true;
          analyze(); // Run immediately
          intervalId = setInterval(analyze, interval);
        }
      },
      stop: () => {
        if (isRunning) {
          isRunning = false;
          clearInterval(intervalId);
        }
      },
      isRunning: () => isRunning
    };
  }
}

// Export the client for use in other modules
export default VolleyballAIClient; 